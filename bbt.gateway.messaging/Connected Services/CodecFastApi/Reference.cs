//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CodecFastApi
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CodecFastApi.SoapSoap")]
    public interface SoapSoap
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SendSms", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> SendSmsAsync(string userName, string password, string sender, string phone, string messageContent, string msgSpecialId, bool isOtn, string headerCode, int responseType, string optionalParameters, string iysBrandCode, string iysRecipientType, string iysMessageType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SendSmsOnNet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> SendSmsOnNetAsync(string userName, string password, string sender, string phone, string messageContent, string msgSpecialId, int responseType, string optionalParameters, string iysBrandCode, string iysRecipientType, string iysMessageType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SendSmsTaxNo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> SendSmsTaxNoAsync(string userName, string password, string sender, string taxno, string messageContent, string msgSpecialId, bool isOtn, string headerCode, int responseType, string optionalParameters, string iysBrandCode, string iysRecipientType, string iysMessageType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SendSmsTckn", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> SendSmsTcknAsync(string userName, string password, string sender, string tckn, string messageContent, string msgSpecialId, bool isOtn, string headerCode, int responseType, string optionalParameters, string iysBrandCode, string iysRecipientType, string iysMessageType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetStatusAsync(string userName, string password, string id, int responseType, string optionalParameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetSenderInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetSenderInfoAsync(string userName, string password, int responseType, string optionalParameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetCredit", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<int> GetCreditAsync(string userName, string password, string optionalParameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/OptionalParameterBuilder", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> OptionalParameterBuilderAsync(CodecFastApi.KeyAndValue[] parametres);
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class KeyAndValue
    {
        
        private string keyField;
        
        private string valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Key
        {
            get
            {
                return this.keyField;
            }
            set
            {
                this.keyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Value
        {
            get
            {
                return this.valueField;
            }
            set
            {
                this.valueField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    public interface SoapSoapChannel : CodecFastApi.SoapSoap, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    public partial class SoapSoapClient : System.ServiceModel.ClientBase<CodecFastApi.SoapSoap>, CodecFastApi.SoapSoap
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public SoapSoapClient(EndpointConfiguration endpointConfiguration) : 
                base(SoapSoapClient.GetBindingForEndpoint(endpointConfiguration), SoapSoapClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public SoapSoapClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(SoapSoapClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public SoapSoapClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(SoapSoapClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public SoapSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<string> SendSmsAsync(string userName, string password, string sender, string phone, string messageContent, string msgSpecialId, bool isOtn, string headerCode, int responseType, string optionalParameters, string iysBrandCode, string iysRecipientType, string iysMessageType)
        {
            return base.Channel.SendSmsAsync(userName, password, sender, phone, messageContent, msgSpecialId, isOtn, headerCode, responseType, optionalParameters, iysBrandCode, iysRecipientType, iysMessageType);
        }
        
        public System.Threading.Tasks.Task<string> SendSmsOnNetAsync(string userName, string password, string sender, string phone, string messageContent, string msgSpecialId, int responseType, string optionalParameters, string iysBrandCode, string iysRecipientType, string iysMessageType)
        {
            return base.Channel.SendSmsOnNetAsync(userName, password, sender, phone, messageContent, msgSpecialId, responseType, optionalParameters, iysBrandCode, iysRecipientType, iysMessageType);
        }
        
        public System.Threading.Tasks.Task<string> SendSmsTaxNoAsync(string userName, string password, string sender, string taxno, string messageContent, string msgSpecialId, bool isOtn, string headerCode, int responseType, string optionalParameters, string iysBrandCode, string iysRecipientType, string iysMessageType)
        {
            return base.Channel.SendSmsTaxNoAsync(userName, password, sender, taxno, messageContent, msgSpecialId, isOtn, headerCode, responseType, optionalParameters, iysBrandCode, iysRecipientType, iysMessageType);
        }
        
        public System.Threading.Tasks.Task<string> SendSmsTcknAsync(string userName, string password, string sender, string tckn, string messageContent, string msgSpecialId, bool isOtn, string headerCode, int responseType, string optionalParameters, string iysBrandCode, string iysRecipientType, string iysMessageType)
        {
            return base.Channel.SendSmsTcknAsync(userName, password, sender, tckn, messageContent, msgSpecialId, isOtn, headerCode, responseType, optionalParameters, iysBrandCode, iysRecipientType, iysMessageType);
        }
        
        public System.Threading.Tasks.Task<string> GetStatusAsync(string userName, string password, string id, int responseType, string optionalParameters)
        {
            return base.Channel.GetStatusAsync(userName, password, id, responseType, optionalParameters);
        }
        
        public System.Threading.Tasks.Task<string> GetSenderInfoAsync(string userName, string password, int responseType, string optionalParameters)
        {
            return base.Channel.GetSenderInfoAsync(userName, password, responseType, optionalParameters);
        }
        
        public System.Threading.Tasks.Task<int> GetCreditAsync(string userName, string password, string optionalParameters)
        {
            return base.Channel.GetCreditAsync(userName, password, optionalParameters);
        }
        
        public System.Threading.Tasks.Task<string> OptionalParameterBuilderAsync(CodecFastApi.KeyAndValue[] parametres)
        {
            return base.Channel.OptionalParameterBuilderAsync(parametres);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.SoapSoap))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.Transport;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.SoapSoap12))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                textBindingElement.MessageVersion = System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion.Soap12, System.ServiceModel.Channels.AddressingVersion.None);
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpsTransportBindingElement httpsBindingElement = new System.ServiceModel.Channels.HttpsTransportBindingElement();
                httpsBindingElement.AllowCookies = true;
                httpsBindingElement.MaxBufferSize = int.MaxValue;
                httpsBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpsBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.SoapSoap))
            {
                return new System.ServiceModel.EndpointAddress("https://fastsms-api.codec.com.tr/Soap.asmx");
            }
            if ((endpointConfiguration == EndpointConfiguration.SoapSoap12))
            {
                return new System.ServiceModel.EndpointAddress("https://fastsms-api.codec.com.tr/Soap.asmx");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        public enum EndpointConfiguration
        {
            
            SoapSoap,
            
            SoapSoap12,
        }
    }
}

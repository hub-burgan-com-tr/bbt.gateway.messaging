name: CI-CD-MessagingGateway
on:
  push:
    branches: [ main ]
    paths:
      - 'bbt.gateway.messaging/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'bbt.gateway.messaging/**'
  workflow_dispatch:

env:
  APP_NAME: messaging-gateway
  NAMESPACE: bbt-integration
  CLUSTER_NAME: Endorsement
  CLUSTER_RESOURCE_GROUP: Endorsement_group
  SECRET: docker-hub

jobs:
  ci-cd-MessagingGateway:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/dotnet@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --file=bbt.gateway.messaging.sln
          
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
                 
      - name: Replace MsSQL DefaultConnection
        run: |
          sed -i -e "s/mssqldefaultconnection/${{ secrets.MSSQL_DB_CONNECTION }}/g" ./bbt.gateway.messaging/appsettings.Mock.json
          sed -i -e "s/mssqlbankingconnection/${{ secrets.MSSQL_DB_CONNECTION }}/g" ./bbt.gateway.messaging/appsettings.Mock.json
          ls
          echo "----------------------------------------"
          ls ./bbt.gateway.messaging/
          
      - name: Replace SNYK_TOKEN
        run: |
          sed -i -e "s/SNYK_TOKEN/${{ secrets.SNYK_TOKEN }}/g" ./Dockerfile      
          
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.APP_NAME }}:${{ github.sha }}       
          
      # Set the target Azure Kubernetes Service (AKS) cluster. 
      - uses: azure/aks-set-context@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          cluster-name: ${{ env.CLUSTER_NAME }}
          resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}
    
      # Create namespace if doesn't exist
      - run: |
          kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o json | kubectl apply -f -
    
      # Create image pull secret for Docker
      - uses: azure/k8s-create-secret@v1
        with:
          container-registry-url: docker.io
          container-registry-username: ${{ secrets.DOCKER_HUB_USERNAME }}
          container-registry-password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
          secret-name: ${{ env.SECRET }}
          namespace: ${{ env.NAMESPACE }}
          arguments: --force true

      # Deploy app to AKS
      - uses: azure/k8s-deploy@v1
        with:
          manifests: |
            ${{ github.workspace }}/manifests/Api/deployment.yaml
            ${{ github.workspace }}/manifests/Api/service.yaml
          images: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.APP_NAME }}:${{ github.sha }}
          imagepullsecrets: |
            ${{ env.SECRET }}
          namespace: ${{ env.NAMESPACE }}
